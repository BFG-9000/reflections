Question:  What happens when you initializ a repository?  Why do you need to do it?
Answer:  GIT sets up the folder structure and schema it needs to track changes in the current directory and indexes the files and folders within it.  You need that structure in order to use git to commit the changes you make.
Question: How is the staging area different from the working directory and the repository?  What value do yo think it offers?
The staging area is a buffer between the working directory and the repository.  It allow you to choose what files are tracked by git in the working directory.
Question: Haw can you use the staging area to make sure you have one commit per logical change:
Answer:  By comparing the staging are to your working directory and repository you can verify the changes you are making only reflect 1 logical change.
Question:  What are some situations when branches would be helpful in keeping your history organized?  How would branches help?
Answer:  When creating the soils.py program for gis there were many different changes I needed to make to the structure of the program as I learned more python and tried better ways to make the program.  Also the program then changed into one to create text for cad.  At that point it could have benefitted from commit tracking and branching.
Question:  How do the diagrams help you visualize the branch structure?
Answer:  We are very familiar with plants, trees, etc. and know about walking down different sidewalks and the graph provides a handy visual image to our brains that allows us to conceptualize the way the computer organizes and tracks commits.
Question:  What is the result of mergin two branched together?  Why do we represent it in the diagram the way we do?
Answer:  Merging two branches together takes all of the changes from both branches and combines them together on a line by line basis. We represent it in the diagram the way we do, because it is similar to the confluence of two rivers metaphorically.
Question:  What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Answer:  If the coding of both contributors is coordinated automatic merging should work quickly and accurately.  If the work being done on the branches is not being coordinated then automatic merging could cause some serious problems.  Manually merging seems to be tedious but is necessary when the same area of the program has been changed in different branches.